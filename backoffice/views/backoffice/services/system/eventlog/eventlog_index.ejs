<%- include('../../../../layout/header2') %>

<div class="wrapper">	
<%- include('../../../../layout/sidebar') %>
<div class="main">
<%- include('../../../../layout/navbar') %>

<main id="v-app" class="content p-0 position-relative">
    <div class="bg-white p-2 border-bottom">
        <div>
            <h3>Journal</h3>            
        </div>
        <div>
            <form>
                <div class="d-flex">
                    <div class="form-check form-switch me-4">
                        <input class="form-check-input" type="checkbox" id="useRandomTrxAmount" v-model="filters.transactions">
                        <label class="form-check-label" for="useRandomTrxAmount">TRANSACTION</label>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <div class="bg-white table-responsive" style="font-size: 13px">
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>N°</th>
                    <th>Entité</th>
                    <th>Evènements</th>
                    <th>Référence</th>
                    <th>Service déclencheur</th>
                    <th>Type d'évènements</th>
                    <th>Niveau</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(event,index) in filterEvents(events)">
                    <td>{{ index + 1}}</td>
                    <td >{{ event.entityType}}</td>
                    <td class="fw-bold">{{ event.action}}</td>
                    <td>{{ event.entityRef}}</td>
                    <td>{{ event.originService}}</td>
                    <td>
                        <span class="badge" v-bind:class="[getBadgeBackground(event.strictType)]">{{ event.strictType}}</span>
                    </td>
                    <td>
                        <span class="badge" v-bind:class="[getBadgeBackground(event.loggingLevel)]">{{ event.loggingLevel}}</span>
                    </td>
                    <td>{{ event.date}}</td>
                </tr>
            </tbody>
        </table>
    </div>
</main>
</div>
</div>

<%- include('../../../../layout/scripts2') %>

<script>
    function EventlogManagePage(data){
        return vm = new Vue({
            el:"#v-app",

            data: {

                urls:{
                    services:data.servicesUrls
                },

                filters:{
                    transactions:false
                },

                events: []
            },

            mounted: function (){

                var vm = this;

                setInterval(function(){
                    vm.getAllEvents();
                },2000)

            },

            methods: {

                getAllEventsRequest: function(){
                    return axios.get(this.urls.services.eventlog.get.allEvents);
                },

                getAllEvents: function(){

                    //NProgress.start();

                    var vm = this; 

                    this.getAllEventsRequest()
                        .then(function(response){
                            vm.events = response.data;
                        })
                        .catch(function(error){
                            console.log(error.message);
                            alertify.error("Une erreur c'est produite lors de la récupération des évènements")
                        })
                        .then(function(){
                            //NProgress.done();
                        });
                },

                /* Helpers */
                getBadgeBackground:  function(tag){
                    if(tag == "INFO"){
                        return "bg-info"
                    }else if(tag == "WARNING"){
                        return "bg-warning"
                    }else if(tag == "ERROR"){
                        return "bg-danger"
                    }else if(tag == "LOG"){
                        return "bg-secondary"
                    }else if(tag == "EVENT"){
                        return "bg-success"
                    }else if(tag == "UPDATED"){
                        return "bg-primary"
                    }else{
                        return "bg-secondary"
                    }
                },

                filterEvents: function(eventsTmp){
                    events = [];

                    for (var i = 0; i < eventsTmp.length; i++) {
                        e = eventsTmp[i];

                        if(this.filters.transactions == true ){
                            if(e.entityType == "TRANSACTION"){
                                events.push(e); 
                            }
                        }else{
                            events.push(e);
                        }
                    }

                    return events;
                }
            }

        });
    }

    var vm = EventlogManagePage({
        servicesUrls:<%- JSON.stringify(data.urls.servicesUrls) %>
    });
</script>

<%- include('../../../../layout/footer') %>



